<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.EditorServices</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PowerShell.EditorServices.AnalysisOutputWriter">
            <summary>
            Provides an implementation of ScriptAnalyzer's IOutputWriter
            interface that writes to trace logs.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.AnalysisService">
            <summary>
            Provides a high-level service for performing semantic analysis
            of PowerShell scripts.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.AnalysisService.IncludedRules">
            <summary>
            Defines the list of Script Analyzer rules to include by default if
            no settings file is specified.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AnalysisService.#ctor(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String)">
            <summary>
            Creates an instance of the AnalysisService class.
            </summary>
            <param name="consoleHost">An object that implements IConsoleHost in which to write errors/warnings 
            from analyzer.</param>
            <param name="settingsPath">Path to a PSScriptAnalyzer settings file.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AnalysisService.GetSemanticMarkers(Microsoft.PowerShell.EditorServices.ScriptFile)">
            <summary>
            Performs semantic analysis on the given ScriptFile and returns
            an array of ScriptFileMarkers.
            </summary>
            <param name="file">The ScriptFile which will be analyzed for semantic markers.</param>
            <returns>An array of ScriptFileMarkers containing semantic analysis results.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AnalysisService.Dispose">
            <summary>
            Disposes the runspace being used by the analysis service.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.PromptStyle">
            <summary>
            Indicates the style of prompt to be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Console.PromptStyle.Full">
            <summary>
            Indicates that the full prompt should be displayed
            with all relevant details.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Console.PromptStyle.Minimal">
            <summary>
            Indicates that a minimal prompt should be displayed,
            generally used after the full prompt has already been
            displayed and the options must be displayed again.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler">
            <summary>
            Provides a base implementation for IPromptHandler classes 
            that present the user a set of options from which a selection
            should be made.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.Caption">
            <summary>
            Gets the caption (title) string to display with the prompt.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.Message">
            <summary>
            Gets the descriptive message to display with the prompt.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.Choices">
            <summary>
            Gets the array of choices from which the user must select.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.DefaultChoice">
            <summary>
            Gets the index of the default choice so that the user
            interface can make it easy to select this option.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.PromptForChoice(System.String,System.String,Microsoft.PowerShell.EditorServices.ChoiceDetails[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Prompts the user to make a choice using the provided details.
            </summary>
            <param name="promptCaption">
            The caption string which will be displayed to the user.
            </param>
            <param name="promptMessage">
            The descriptive message which will be displayed to the user.
            </param>
            <param name="choices">
            The list of choices from which the user will select.
            </param>
            <param name="defaultChoice">
            The default choice to highlight for the user.
            </param>
            <param name="cancellationToken">
            A CancellationToken that can be used to cancel the prompt.
            </param>
            <returns>
            A Task instance that can be monitored for completion to get
            the user's choice.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.HandleResponse(System.String)">
            <summary>
            Implements behavior to handle the user's response.
            </summary>
            <param name="responseString">The string representing the user's response.</param>
            <returns>
            True if the prompt is complete, false if the prompt is 
            still waiting for a valid response.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.OnPromptCancelled">
            <summary>
            Called when the active prompt should be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ChoicePromptHandler.ShowPrompt(Microsoft.PowerShell.EditorServices.Console.PromptStyle)">
            <summary>
            Called when the prompt should be displayed to the user.
            </summary>
            <param name="promptStyle">
            Indicates the prompt style to use when showing the prompt.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.ConsoleChoicePromptHandler">
            <summary>
            Provides a standard implementation of ChoicePromptHandler
            for use in the interactive console (REPL).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleChoicePromptHandler.#ctor(Microsoft.PowerShell.EditorServices.Console.IConsoleHost)">
            <summary>
            Creates an instance of the ConsoleChoicePromptHandler class.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for writing to the
            console.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleChoicePromptHandler.ShowPrompt(Microsoft.PowerShell.EditorServices.Console.PromptStyle)">
            <summary>
            Called when the prompt should be displayed to the user.
            </summary>
            <param name="promptStyle">
            Indicates the prompt style to use when showing the prompt.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleChoicePromptHandler.HandleResponse(System.String)">
            <summary>
            Implements behavior to handle the user's response.
            </summary>
            <param name="responseString">The string representing the user's response.</param>
            <returns>
            True if the prompt is complete, false if the prompt is 
            still waiting for a valid response.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.ConsoleInputPromptHandler">
            <summary>
            Provides a standard implementation of InputPromptHandler
            for use in the interactive console (REPL).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleInputPromptHandler.#ctor(Microsoft.PowerShell.EditorServices.Console.IConsoleHost)">
            <summary>
            Creates an instance of the ConsoleInputPromptHandler class.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for writing to the
            console.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleInputPromptHandler.ShowPromptMessage(System.String,System.String)">
            <summary>
            Called when the prompt caption and message should be
            displayed to the user.
            </summary>
            <param name="caption">The caption string to be displayed.</param>
            <param name="message">The message string to be displayed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleInputPromptHandler.ShowFieldPrompt(Microsoft.PowerShell.EditorServices.Console.FieldDetails)">
            <summary>
            Called when a prompt should be displayed for a specific
            input field.
            </summary>
            <param name="fieldDetails">The details of the field to be displayed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleInputPromptHandler.ShowErrorMessage(System.Exception)">
            <summary>
            Called when an error should be displayed, such as when the
            user types in a string with an incorrect format for the
            current field.
            </summary>
            <param name="e">
            The Exception containing the error to be displayed.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.ConsolePromptHandlerContext">
            <summary>
            Provides a standard IPromptHandlerContext implementation for
            use in the interactive console (REPL).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsolePromptHandlerContext.#ctor(Microsoft.PowerShell.EditorServices.Console.IConsoleHost)">
            <summary>
            Creates a new instance of the ConsolePromptHandlerContext
            class.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for writing to the
            console.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsolePromptHandlerContext.GetChoicePromptHandler">
            <summary>
            Creates a new ChoicePromptHandler instance so that
            the caller can display a choice prompt to the user.
            </summary>
            <returns>
            A new ChoicePromptHandler instance.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsolePromptHandlerContext.GetInputPromptHandler">
            <summary>
            Creates a new InputPromptHandler instance so that
            the caller can display an input prompt to the user.
            </summary>
            <returns>
            A new InputPromptHandler instance.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.ConsoleService">
            <summary>
            Provides a high-level service for exposing an interactive
            PowerShell console (REPL) to the user.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Creates a new instance of the ConsoleService class.
            </summary>
            <param name="powerShellContext">
            The PowerShellContext that will be used for executing commands
            against a runspace.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContext,Microsoft.PowerShell.EditorServices.Console.IPromptHandlerContext)">
            <summary>
            Creates a new instance of the ConsoleService class.
            </summary>
            <param name="powerShellContext">
            The PowerShellContext that will be used for executing commands
            against a runspace.
            </param>
            <param name="defaultPromptHandlerContext">
            The default IPromptHandlerContext implementation to use for
            displaying prompts to the user.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.ExecuteCommand(System.String,System.Boolean)">
            <summary>
            Called when a command string is received from the user.
            If a prompt is currently active, the prompt handler is
            asked to handle the string.  Otherwise the string is
            executed in the PowerShellContext.
            </summary>
            <param name="inputString">The input string to evaluate.</param>
            <param name="echoToConsole">If true, the input will be echoed to the console.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.ReceivePromptResponse(System.String,System.Boolean)">
            <summary>
            Provides a direct path for a caller that just wants to provide
            user response to a prompt without executing a command if there
            is no active prompt.
            </summary>
            <param name="promptResponse">The user's response to the active prompt.</param>
            <param name="echoToConsole">If true, the input will be echoed to the console.</param>
            <returns>True if there was a prompt, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.PushPromptHandlerContext(Microsoft.PowerShell.EditorServices.Console.IPromptHandlerContext)">
            <summary>
            Pushes a new IPromptHandlerContext onto the stack.  This
            is used when a prompt handler context is only needed for
            a short series of command executions.
            </summary>
            <param name="promptHandlerContext">
            The IPromptHandlerContext instance to push onto the stack.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.PopPromptHandlerContext">
            <summary>
            Pops the most recent IPromptHandlerContext from the stack.
            This is called when execution requiring a specific type of
            prompt has completed and the previous prompt handler context
            should be restored.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.ConsoleService.SendControlC">
            <summary>
            Cancels the currently executing command.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.Console.ConsoleService.OutputWritten">
            <summary>
            An event that is raised when textual output of any type is
            written to the session.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.FieldDetails">
            <summary>
            Contains the details of an input field shown from an
            InputPromptHandler.  This class is meant to be
            serializable to the user's UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.Label">
            <summary>
            Gets or sets the descriptive label for the field.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.FieldType">
            <summary>
            Gets or sets the field's value type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.HelpMessage">
            <summary>
            Gets or sets the field's help message.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.IsMandatory">
            <summary>
            Gets or sets a boolean that is true if the user
            must enter a value for the field.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.DefaultValue">
            <summary>
            Gets or sets the default value for the field.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.IsCollection">
            <summary>
            Gets or sets a boolean that is true if the field
            represents a collection of values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.FieldDetails.ElementType">
            <summary>
            Gets or sets the expected type for individual items 
            in the field's collection.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.FieldDetails.#ctor(System.String,System.String,System.Type,System.Boolean,System.Object)">
            <summary>
            Creates an instance of the FieldDetails class.
            </summary>
            <param name="name">The field's name.</param>
            <param name="label">The field's label.</param>
            <param name="fieldType">The field's value type.</param>
            <param name="isMandatory">If true, marks the field as mandatory.</param>
            <param name="defaultValue">The field's default value.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler">
            <summary>
            Provides a base implementation for IPromptHandler classes 
            that present the user a set of fields for which values
            should be entered.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.Fields">
            <summary>
            Gets the array of fields for which the user must enter values.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.PromptForInput(System.Threading.CancellationToken)">
            <summary>
            Prompts the user for a line of input without writing any message or caption.
            </summary>
            <returns>
            A Task instance that can be monitored for completion to get
            the user's input.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.PromptForInput(System.String,System.String,Microsoft.PowerShell.EditorServices.Console.FieldDetails[],System.Threading.CancellationToken)">
            <summary>
            Prompts the user for a line (or lines) of input.
            </summary>
            <param name="promptCaption">
            A title shown before the series of input fields.
            </param>
            <param name="promptMessage">
            A descritpive message shown before the series of input fields.
            </param>
            <param name="fields">
            An array of FieldDetails items to be displayed which prompt the
            user for input of a specific type.
            </param>
            <param name="cancellationToken">
            A CancellationToken that can be used to cancel the prompt.
            </param>
            <returns>
            A Task instance that can be monitored for completion to get
            the user's input.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.HandleResponse(System.String)">
            <summary>
            Implements behavior to handle the user's response.
            </summary>
            <param name="responseString">The string representing the user's response.</param>
            <returns>
            True if the prompt is complete, false if the prompt is 
            still waiting for a valid response.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.OnPromptCancelled">
            <summary>
            Called when the active prompt should be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.ShowPromptMessage(System.String,System.String)">
            <summary>
            Called when the prompt caption and message should be
            displayed to the user.
            </summary>
            <param name="caption">The caption string to be displayed.</param>
            <param name="message">The message string to be displayed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.ShowFieldPrompt(Microsoft.PowerShell.EditorServices.Console.FieldDetails)">
            <summary>
            Called when a prompt should be displayed for a specific
            input field.
            </summary>
            <param name="fieldDetails">The details of the field to be displayed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.InputPromptHandler.ShowErrorMessage(System.Exception)">
            <summary>
            Called when an error should be displayed, such as when the
            user types in a string with an incorrect format for the
            current field.
            </summary>
            <param name="e">
            The Exception containing the error to be displayed.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.IPromptHandlerContext">
            <summary>
            Defines an interface for requesting prompt handlers in
            a given user interface context.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IPromptHandlerContext.GetChoicePromptHandler">
            <summary>
            Creates a new ChoicePromptHandler instance so that
            the caller can display a choice prompt to the user.
            </summary>
            <returns>
            A new ChoicePromptHandler instance.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IPromptHandlerContext.GetInputPromptHandler">
            <summary>
            Creates a new InputPromptHandler instance so that
            the caller can display an input prompt to the user.
            </summary>
            <returns>
            A new InputPromptHandler instance.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.PromptHandler">
            <summary>
            Defines an abstract base class for prompt handler implementations.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.PromptHandler.HandleResponse(System.String)">
            <summary>
            Implements behavior to handle the user's response.
            </summary>
            <param name="responseString">The string representing the user's response.</param>
            <returns>
            True if the prompt is complete, false if the prompt is 
            still waiting for a valid response.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.PromptHandler.CancelPrompt">
            <summary>
            Called when the active prompt should be cancelled.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.Console.PromptHandler.PromptCancelled">
            <summary>
            An event that gets raised if the prompt is cancelled, either
            by the user or due to a timeout.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.PromptHandler.OnPromptCancelled">
            <summary>
            Implementation classes may override this method to perform
            cleanup when the CancelPrompt method gets called.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.IConsoleHost">
            <summary>
            Provides a simplified interface for implementing a PowerShell
            host that will be used for an interactive console.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHost.WriteOutput(System.String,System.Boolean,Microsoft.PowerShell.EditorServices.OutputType,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes output of the given type to the user interface with
            the given foreground and background colors.  Also includes
            a newline if requested.
            </summary>
            <param name="outputString">
            The output string to be written.
            </param>
            <param name="includeNewLine">
            If true, a newline should be appended to the output's contents.
            </param>
            <param name="outputType">
            Specifies the type of output to be written.
            </param>
            <param name="foregroundColor">
            Specifies the foreground color of the output to be written.
            </param>
            <param name="backgroundColor">
            Specifies the background color of the output to be written.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHost.GetChoicePromptHandler">
            <summary>
            Creates a ChoicePromptHandler to use for displaying a
            choice prompt to the user.
            </summary>
            <returns>A new ChoicePromptHandler instance.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHost.GetInputPromptHandler">
            <summary>
            Creates an InputPrompt handle to use for displaying input
            prompts to the user.
            </summary>
            <returns>A new InputPromptHandler instance.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHost.UpdateProgress(System.Int64,Microsoft.PowerShell.EditorServices.ProgressDetails)">
            <summary>
            Sends a progress update event to the user.
            </summary>
            <param name="sourceId">The source ID of the progress event.</param>
            <param name="progressDetails">The details of the activity's current progress.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHost.ExitSession(System.Int32)">
            <summary>
            Notifies the IConsoleHost implementation that the PowerShell
            session is exiting.
            </summary>
            <param name="exitCode">The error code that identifies the session exit result.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions">
            <summary>
            Provides helpful extension methods for the IConsoleHost interface.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions.WriteOutput(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String)">
            <summary>
            Writes normal output with a newline to the user interface.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for WriteOutput calls.
            </param>
            <param name="outputString">
            The output string to be written.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions.WriteOutput(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String,System.Boolean)">
            <summary>
            Writes normal output to the user interface.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for WriteOutput calls.
            </param>
            <param name="outputString">
            The output string to be written.
            </param>
            <param name="includeNewLine">
            If true, a newline should be appended to the output's contents.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions.WriteOutput(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String,Microsoft.PowerShell.EditorServices.OutputType)">
            <summary>
            Writes output of a particular type to the user interface
            with a newline ending.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for WriteOutput calls.
            </param>
            <param name="outputString">
            The output string to be written.
            </param>
            <param name="outputType">
            Specifies the type of output to be written.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions.WriteOutput(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String,System.Boolean,Microsoft.PowerShell.EditorServices.OutputType)">
            <summary>
            Writes output of a particular type to the user interface.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for WriteOutput calls.
            </param>
            <param name="outputString">
            The output string to be written.
            </param>
            <param name="includeNewLine">
            If true, a newline should be appended to the output's contents.
            </param>
            <param name="outputType">
            Specifies the type of output to be written.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Console.IConsoleHostExtensions.WriteOutput(Microsoft.PowerShell.EditorServices.Console.IConsoleHost,System.String,System.Boolean,Microsoft.PowerShell.EditorServices.OutputType,System.ConsoleColor)">
            <summary>
            Writes output of a particular type to the user interface using
            a particular foreground color.
            </summary>
            <param name="consoleHost">
            The IConsoleHost implementation to use for WriteOutput calls.
            </param>
            <param name="outputString">
            The output string to be written.
            </param>
            <param name="includeNewLine">
            If true, a newline should be appended to the output's contents.
            </param>
            <param name="outputType">
            Specifies the type of output to be written.
            </param>
            <param name="foregroundColor">
            Specifies the foreground color of the output to be written.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.BreakpointDetails">
            <summary>
            Provides details about a breakpoint that is set in the
            PowerShell debugger.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetails.Source">
            <summary>
            Gets the source where the breakpoint is located.  Used only for debug purposes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetails.LineNumber">
            <summary>
            Gets the line number at which the breakpoint is set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetails.ColumnNumber">
            <summary>
            Gets the column number at which the breakpoint is set. If null, the default of 1 is used.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BreakpointDetails.Create(System.String,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates an instance of the BreakpointDetails class from the individual
            pieces of breakpoint information provided by the client.
            </summary>
            <param name="source"></param>
            <param name="line"></param>
            <param name="column"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BreakpointDetails.Create(System.Management.Automation.Breakpoint)">
            <summary>
            Creates an instance of the BreakpointDetails class from a
            PowerShell Breakpoint object.
            </summary>
            <param name="breakpoint">The Breakpoint instance from which details will be taken.</param>
            <returns>A new instance of the BreakpointDetails class.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.BreakpointDetailsBase">
            <summary>
            Provides details about a breakpoint that is set in the
            PowerShell debugger.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetailsBase.Verified">
            <summary>
            Gets or sets a boolean indicator that if true, breakpoint could be set 
            (but not necessarily at the desired location).  
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetailsBase.Message">
            <summary>
            Gets or set an optional message about the state of the breakpoint. This is shown to the user 
            and can be used to explain why a breakpoint could not be verified.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BreakpointDetailsBase.Condition">
            <summary>
            Gets the breakpoint condition string.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.DebugService">
            <summary>
            Provides a high-level service for interacting with the
            PowerShell debugger in the runspace managed by a PowerShellContext.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Initializes a new instance of the DebugService class and uses
            the given PowerShellContext for all future operations.
            </summary>
            <param name="powerShellContext">
            The PowerShellContext to use for all debugging operations.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.SetLineBreakpoints(Microsoft.PowerShell.EditorServices.ScriptFile,Microsoft.PowerShell.EditorServices.BreakpointDetails[],System.Boolean)">
            <summary>
            Sets the list of line breakpoints for the current debugging session.
            </summary>
            <param name="scriptFile">The ScriptFile in which breakpoints will be set.</param>
            <param name="breakpoints">BreakpointDetails for each breakpoint that will be set.</param>
            <param name="clearExisting">If true, causes all existing breakpoints to be cleared before setting new ones.</param>
            <returns>An awaitable Task that will provide details about the breakpoints that were set.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.SetCommandBreakpoints(Microsoft.PowerShell.EditorServices.CommandBreakpointDetails[],System.Boolean)">
            <summary>
            Sets the list of command breakpoints for the current debugging session. 
            </summary>
            <param name="breakpoints">CommandBreakpointDetails for each command breakpoint that will be set.</param>
            <param name="clearExisting">If true, causes all existing function breakpoints to be cleared before setting new ones.</param>
            <returns>An awaitable Task that will provide details about the breakpoints that were set.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.Continue">
            <summary>
            Sends a "continue" action to the debugger when stopped.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.StepOver">
            <summary>
            Sends a "step over" action to the debugger when stopped. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.StepIn">
            <summary>
            Sends a "step in" action to the debugger when stopped.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.StepOut">
            <summary>
            Sends a "step out" action to the debugger when stopped.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.Break">
            <summary>
            Causes the debugger to break execution wherever it currently
            is at the time.  This is equivalent to clicking "Pause" in a 
            debugger UI.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.Abort">
            <summary>
            Aborts execution of the debugger while it is running, even while
            it is stopped.  Equivalent to calling PowerShellContext.AbortExecution.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.GetVariables(System.Int32)">
            <summary>
            Gets the list of variables that are children of the scope or variable
            that is identified by the given referenced ID.
            </summary>
            <param name="variableReferenceId"></param>
            <returns>An array of VariableDetails instances which describe the requested variables.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.GetVariableFromExpression(System.String,System.Int32)">
            <summary>
            Evaluates a variable expression in the context of the stopped
            debugger.  This method decomposes the variable expression to
            walk the cached variable data for the specified stack frame.
            </summary>
            <param name="variableExpression">The variable expression string to evaluate.</param>
            <param name="stackFrameId">The ID of the stack frame in which the expression should be evaluated.</param>
            <returns>A VariableDetails object containing the result.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.EvaluateExpression(System.String,System.Int32,System.Boolean)">
            <summary>
            Evaluates an expression in the context of the stopped
            debugger.  This method will execute the specified expression
            PowerShellContext.
            </summary>
            <param name="expressionString">The expression string to execute.</param>
            <param name="stackFrameId">The ID of the stack frame in which the expression should be executed.</param>
            <param name="writeResultAsOutput">
            If true, writes the expression result as host output rather than returning the results.
            In this case, the return value of this function will be null.</param>
            <returns>A VariableDetails object containing the result.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.GetStackFrames">
            <summary>
            Gets the list of stack frames at the point where the
            debugger sf stopped.
            </summary>
            <returns>
            An array of StackFrameDetails instances that contain the stack trace.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.GetVariableScopes(System.Int32)">
            <summary>
            Gets the list of variable scopes for the stack frame that
            is identified by the given ID.
            </summary>
            <param name="stackFrameId">The ID of the stack frame at which variable scopes should be retrieved.</param>
            <returns>The list of VariableScope instances which describe the available variable scopes.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.DebugService.GetBreakpointActionScriptBlock(Microsoft.PowerShell.EditorServices.BreakpointDetailsBase)">
            <summary>
            Inspects the condition, putting in the appropriate scriptblock template 
            "if (expression) { break }".  If errors are found in the condition, the 
            breakpoint passed in is updated to set Verified to false and an error
            message is put into the breakpoint.Message property.
            </summary>
            <param name="breakpoint"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.DebugService.DebuggerStopped">
            <summary>
            Raised when the debugger stops execution at a breakpoint or when paused.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.DebugService.BreakpointUpdated">
            <summary>
            Raised when a breakpoint is added/removed/updated in the debugger.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails">
            <summary>
            Provides details about a command breakpoint that is set in the PowerShell debugger.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails.Name">
            <summary>
            Gets the name of the command on which the command breakpoint has been set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails.Create(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails"/> class from the individual
            pieces of breakpoint information provided by the client.
            </summary>
            <param name="name">The name of the command to break on.</param>
            <param name="condition">Condition string that would be applied to the breakpoint Action parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails.Create(System.Management.Automation.Breakpoint)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.PowerShell.EditorServices.CommandBreakpointDetails"/> class from a
            PowerShell CommandBreakpoint object.
            </summary>
            <param name="breakpoint">The Breakpoint instance from which details will be taken.</param>
            <returns>A new instance of the BreakpointDetails class.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.StackFrameDetails">
            <summary>
            Contains details pertaining to a single stack frame in
            the current debugging session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.ScriptPath">
            <summary>
            Gets the path to the script where the stack frame occurred.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.FunctionName">
            <summary>
            Gets the name of the function where the stack frame occurred.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.LineNumber">
            <summary>
            Gets the line number of the script where the stack frame occurred.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.ColumnNumber">
            <summary>
            Gets the column number of the line where the stack frame occurred.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.AutoVariables">
            <summary>
            Gets or sets the VariableContainerDetails that contains the auto variables.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.StackFrameDetails.LocalVariables">
            <summary>
            Gets or sets the VariableContainerDetails that contains the local variables.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.StackFrameDetails.Create(System.Management.Automation.CallStackFrame,Microsoft.PowerShell.EditorServices.VariableContainerDetails,Microsoft.PowerShell.EditorServices.VariableContainerDetails)">
            <summary>
            Creates an instance of the StackFrameDetails class from a
            CallStackFrame instance provided by the PowerShell engine.
            </summary>
            <param name="callStackFrame">
            The original CallStackFrame instance from which details will be obtained.
            </param>
            <param name="autoVariables">
            A variable container with all the filtered, auto variables for this stack frame.
            </param>
            <param name="localVariables">
            A variable container with all the local variables for this stack frame.
            </param>
            <returns>A new instance of the StackFrameDetails class.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.VariableDetails">
            <summary>
            Contains details pertaining to a variable in the current 
            debugging session.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableDetails.DollarPrefix">
            <summary>
            Provides a constant for the dollar sign variable prefix string.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableDetails.#ctor(System.Management.Automation.PSVariable)">
            <summary>
            Initializes an instance of the VariableDetails class from
            the details contained in a PSVariable instance.
            </summary>
            <param name="psVariable">
            The PSVariable instance from which variable details will be obtained.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableDetails.#ctor(System.Management.Automation.PSPropertyInfo)">
            <summary>
            Initializes an instance of the VariableDetails class from
            the details contained in a PSPropertyInfo instance.
            </summary>
            <param name="psProperty">
            The PSPropertyInfo instance from which variable details will be obtained.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableDetails.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the VariableDetails class from
            a given name/value pair.
            </summary>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's value.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableDetails.GetChildren">
            <summary>
            If this variable instance is expandable, this method returns the
            details of its children.  Otherwise it returns an empty array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.VariableDetailsBase">
            <summary>
            Defines the common details between a variable and a variable container such as a scope 
            in the current debugging session.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableDetailsBase.FirstVariableId">
            <summary>
            Provides a constant that is used as the starting variable ID for all.
            Avoid 0 as it indicates a variable node with no children.
            variables.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableDetailsBase.Id">
            <summary>
            Gets the numeric ID of the variable which can be used to refer
            to it in future requests.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableDetailsBase.Name">
            <summary>
            Gets the variable's name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableDetailsBase.ValueString">
            <summary>
            Gets the string representation of the variable's value.
            If the variable is an expandable object, this string
            will be empty.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableDetailsBase.IsExpandable">
            <summary>
            Returns true if the variable's value is expandable, meaning
            that it has child properties or its contents can be enumerated.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableDetailsBase.GetChildren">
            <summary>
            If this variable instance is expandable, this method returns the
            details of its children.  Otherwise it returns an empty array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.VariableScope">
            <summary>
            Contains details pertaining to a variable scope in the current
            debugging session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableScope.Id">
            <summary>
            Gets a numeric ID that can be used in future operations
            relating to this scope.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableScope.Name">
            <summary>
            Gets a name that describes the variable scope.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableScope.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the VariableScope class with
            the given ID and name.
            </summary>
            <param name="id">The variable scope's ID.</param>
            <param name="name">The variable scope's name.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.VariableContainerDetails">
            <summary>
            Container for variables that is not itself a variable per se.  However given how
            VSCode uses an integer variable reference id for every node under the "Variables" tool
            window, it is useful to treat containers, typically scope containers, as a variable.
            Note that these containers are not necessarily always a scope container. Consider a
            container such as "Auto" or "My".  These aren't scope related but serve as just another
            way to organize variables into a useful UI structure.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableContainerDetails.AutoVariablesName">
            <summary>
            Provides a constant for the name of the Global scope.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableContainerDetails.GlobalScopeName">
            <summary>
            Provides a constant for the name of the Global scope.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableContainerDetails.LocalScopeName">
            <summary>
            Provides a constant for the name of the Local scope.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.VariableContainerDetails.ScriptScopeName">
            <summary>
            Provides a constant for the name of the Script scope.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableContainerDetails.#ctor(System.Int32,System.String)">
            <summary>
            Instantiates an instance of VariableScopeDetails.
            </summary>
            <param name="id">The variable reference id for this scope.</param>
            <param name="name">The name of the variable scope.</param>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.VariableContainerDetails.Children">
            <summary>
            Gets the collection of child variables.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.VariableContainerDetails.GetChildren">
            <summary>
            Returns the details of the variable container's children.  If empty, returns an empty array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.EditorContext">
            <summary>
            Provides context for the host editor at the time of creation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.CurrentFile">
            <summary>
            Gets the FileContext for the active file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.SelectedRange">
            <summary>
            Gets the BufferRange representing the current selection in the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.CursorPosition">
            <summary>
            Gets the FilePosition representing the current cursor position.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.#ctor(Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations,Microsoft.PowerShell.EditorServices.ScriptFile,Microsoft.PowerShell.EditorServices.BufferPosition,Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Creates a new instance of the EditorContext class.
            </summary>
            <param name="editorOperations">An IEditorOperations implementation which performs operations in the editor.</param>
            <param name="currentFile">The ScriptFile that is in the active editor buffer.</param>
            <param name="cursorPosition">The position of the user's cursor in the active editor buffer.</param>
            <param name="selectedRange">The range of the user's selection in the active editor buffer.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a selection in the host editor's active buffer.
            </summary>
            <param name="startLine">The 1-based starting line of the selection.</param>
            <param name="startColumn">The 1-based starting column of the selection.</param>
            <param name="endLine">The 1-based ending line of the selection.</param>
            <param name="endColumn">The 1-based ending column of the selection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.SetSelection(Microsoft.PowerShell.EditorServices.BufferPosition,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Sets a selection in the host editor's active buffer.
            </summary>
            <param name="startPosition">The starting position of the selection.</param>
            <param name="endPosition">The ending position of the selection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorContext.SetSelection(Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Sets a selection in the host editor's active buffer.
            </summary>
            <param name="selectionRange">The range of the selection.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.EditorObject">
            <summary>
            Provides the entry point of the extensibility API, inserted into
            the PowerShell session as the "$psEditor" variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.EditorServicesVersion">
            <summary>
            Gets the version of PowerShell Editor Services.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.Workspace">
            <summary>
            Gets the workspace interface for the editor API.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.#ctor(Microsoft.PowerShell.EditorServices.Extensions.ExtensionService,Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations)">
            <summary>
            Creates a new instance of the EditorObject class.
            </summary>
            <param name="extensionService">An ExtensionService which handles command registration.</param>
            <param name="editorOperations">An IEditorOperations implementation which handles operations in the host editor.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.RegisterCommand(Microsoft.PowerShell.EditorServices.Extensions.EditorCommand)">
            <summary>
            Registers a new command in the editor.
            </summary>
            <param name="editorCommand">The EditorCommand to be registered.</param>
            <returns>True if the command is newly registered, false if the command already exists.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.UnregisterCommand(System.String)">
            <summary>
            Unregisters an existing EditorCommand based on its registered name.
            </summary>
            <param name="commandName">The name of the command to be unregistered.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorObject.GetEditorContext">
            <summary>
            Gets the EditorContext which contains the state of the editor
            at the time this method is invoked.
            </summary>
            <returns>A instance of the EditorContext class.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.EditorWorkspace">
            <summary>
            Provides a PowerShell-facing API which allows scripts to
            interact with the editor's workspace.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorWorkspace.OpenFile(System.String)">
            <summary>
            Opens a file in the workspace.  If the file is already open
            its buffer will be made active.
            </summary>
            <param name="filePath">The path to the file to be opened.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand">
            <summary>
            Provides details about a command that has been registered
            with the editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.Name">
            <summary>
            Gets the name which uniquely identifies the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.DisplayName">
            <summary>
            Gets the display name for the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.SuppressOutput">
            <summary>
            Gets the boolean which determines whether this command's
            output should be suppressed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.ScriptBlock">
            <summary>
            Gets the ScriptBlock which can be used to execute the command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates a new EditorCommand instance that invokes a cmdlet or
            function by name.
            </summary>
            <param name="commandName">The unique identifier name for the command.</param>
            <param name="displayName">The display name for the command.</param>
            <param name="suppressOutput">If true, causes output to be suppressed for this command.</param>
            <param name="cmdletName">The name of the cmdlet or function which will be invoked by this command.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.EditorCommand.#ctor(System.String,System.String,System.Boolean,System.Management.Automation.ScriptBlock)">
            <summary>
            Creates a new EditorCommand instance that invokes a ScriptBlock.
            </summary>
            <param name="commandName">The unique identifier name for the command.</param>
            <param name="displayName">The display name for the command.</param>
            <param name="suppressOutput">If true, causes output to be suppressed for this command.</param>
            <param name="scriptBlock">The ScriptBlock which will be invoked by this command.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService">
            <summary>
            Provides a high-level service which enables PowerShell scripts
            and modules to extend the behavior of the host editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.EditorOperations">
            <summary>
            Gets the IEditorOperations implementation used to invoke operations
            in the host editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.EditorObject">
            <summary>
            Gets the EditorObject which exists in the PowerShell session as the
            '$psEditor' variable.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.PowerShellContext">
            <summary>
            Gets the PowerShellContext in which extension code will be executed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Creates a new instance of the ExtensionService which uses the provided
            PowerShellContext for loading and executing extension code.
            </summary>
            <param name="powerShellContext">A PowerShellContext used to execute extension code.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.Initialize(Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations)">
            <summary>
            Initializes this ExtensionService using the provided IEditorOperations
            implementation for future interaction with the host editor.
            </summary>
            <param name="editorOperations">An IEditorOperations implementation.</param>
            <returns>A Task that can be awaited for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.InvokeCommand(System.String,Microsoft.PowerShell.EditorServices.Extensions.EditorContext)">
            <summary>
            Invokes the specified editor command against the provided EditorContext.
            </summary>
            <param name="commandName">The unique name of the command to be invoked.</param>
            <param name="editorContext">The context in which the command is being invoked.</param>
            <returns>A Task that can be awaited for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.RegisterCommand(Microsoft.PowerShell.EditorServices.Extensions.EditorCommand)">
            <summary>
            Registers a new EditorCommand with the ExtensionService and
            causes its details to be sent to the host editor.
            </summary>
            <param name="editorCommand">The details about the editor command to be registered.</param>
            <returns>True if the command is newly registered, false if the command already exists.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.UnregisterCommand(System.String)">
            <summary>
            Unregisters an existing EditorCommand based on its registered name.
            </summary>
            <param name="commandName">The name of the command to be unregistered.</param>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.CommandAdded">
            <summary>
            Raised when a new editor command is added.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.CommandUpdated">
            <summary>
            Raised when an existing editor command is updated.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.Extensions.ExtensionService.CommandRemoved">
            <summary>
            Raised when an existing editor command is removed.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.FileContext">
            <summary>
            Provides context for a file that is open in the editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.FileContext.Path">
            <summary>
            Gets the filesystem path of the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.FileContext.Ast">
            <summary>
            Gets the parsed abstract syntax tree for the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.FileContext.Tokens">
            <summary>
            Gets the parsed token list for the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Extensions.FileContext.FileRange">
            <summary>
            Gets a BufferRange which represents the entire content
            range of the file.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.#ctor(Microsoft.PowerShell.EditorServices.ScriptFile,Microsoft.PowerShell.EditorServices.Extensions.EditorContext,Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations)">
            <summary>
            Creates a new instance of the FileContext class.
            </summary>
            <param name="scriptFile">The ScriptFile to which this file refers.</param>
            <param name="editorContext">The EditorContext to which this file relates.</param>
            <param name="editorOperations">An IEditorOperations implementation which performs operations in the editor.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.GetText">
            <summary>
            Gets the complete file content as a string.
            </summary>
            <returns>A string containing the complete file content.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.GetText(Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Gets the file content in the specified range as a string.
            </summary>
            <param name="bufferRange">The buffer range for which content will be extracted.</param>
            <returns>A string with the specified range of content.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.GetTextLines">
            <summary>
            Gets the complete file content as an array of strings.
            </summary>
            <returns>An array of strings, each representing a line in the file.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.GetTextLines(Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Gets the file content in the specified range as an array of strings.
            </summary>
            <param name="bufferRange">The buffer range for which content will be extracted.</param>
            <returns>An array of strings, each representing a line in the file within the specified range.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.InsertText(System.String)">
            <summary>
            Inserts a text string at the current cursor position represented by
            the parent EditorContext's CursorPosition property.
            </summary>
            <param name="textToInsert">The text string to insert.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.InsertText(System.String,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Inserts a text string at the specified buffer position.
            </summary>
            <param name="textToInsert">The text string to insert.</param>
            <param name="insertPosition">The position at which the text will be inserted.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.InsertText(System.String,System.Int32,System.Int32)">
            <summary>
            Inserts a text string at the specified line and column numbers.
            </summary>
            <param name="textToInsert">The text string to insert.</param>
            <param name="insertLine">The 1-based line number at which the text will be inserted.</param>
            <param name="insertColumn">The 1-based column number at which the text will be inserted.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.InsertText(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a text string to replace the specified range, represented
            by starting and ending line and column numbers.  Can be used to
            insert, replace, or delete text depending on the specified range
            and text to insert.
            </summary>
            <param name="textToInsert">The text string to insert.</param>
            <param name="startLine">The 1-based starting line number where text will be replaced.</param>
            <param name="startColumn">The 1-based starting column number where text will be replaced.</param>
            <param name="endLine">The 1-based ending line number where text will be replaced.</param>
            <param name="endColumn">The 1-based ending column number where text will be replaced.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.FileContext.InsertText(System.String,Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Inserts a text string to replace the specified range. Can be
            used to insert, replace, or delete text depending on the specified
            range and text to insert.
            </summary>
            <param name="textToInsert">The text string to insert.</param>
            <param name="insertRange">The buffer range which will be replaced by the string.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations">
            <summary>
            Provides an interface that must be implemented by an editor
            host to perform operations invoked by extensions written in
            PowerShell.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations.GetEditorContext">
            <summary>
            Gets the EditorContext for the editor's current state.
            </summary>
            <returns>A new EditorContext object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations.OpenFile(System.String)">
            <summary>
            Causes a file to be opened in the editor.  If the file is
            already open, the editor must switch to the file.
            </summary>
            <param name="filePath">The path of the file to be opened.</param>
            <returns>A Task that can be tracked for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations.InsertText(System.String,System.String,Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Inserts text into the specified range for the file at the specified path.
            </summary>
            <param name="filePath">The path of the file which will have text inserted.</param>
            <param name="insertText">The text to insert into the file.</param>
            <param name="insertRange">The range in the file to be replaced.</param>
            <returns>A Task that can be tracked for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Extensions.IEditorOperations.SetSelection(Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Causes the selection to be changed in the editor's active file buffer.
            </summary>
            <param name="selectionRange">The range over which the selection will be made.</param>
            <returns>A Task that can be tracked for completion.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.AstOperations">
            <summary>
            Provides common operations for the syntax tree of a parsed script.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.GetCompletions(System.Management.Automation.Language.Ast,System.Management.Automation.Language.Token[],System.Int32,System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Gets completions for the symbol found in the Ast at 
            the given file offset.
            </summary>
            <param name="scriptAst">
            The Ast which will be traversed to find a completable symbol.
            </param>
            <param name="currentTokens">
            The array of tokens corresponding to the scriptAst parameter.
            </param>
            <param name="fileOffset">
            The 1-based file offset at which a symbol will be located.
            </param>
            <param name="runspace">
            The Runspace to use for gathering completions.
            </param>
            <returns>
            A CommandCompletion instance that contains completions for the
            symbol at the given offset.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindSymbolAtPosition(System.Management.Automation.Language.Ast,System.Int32,System.Int32)">
            <summary>
            Finds the symbol at a given file location 
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="lineNumber">The line number of the cursor for the given script</param>
            <param name="columnNumber">The coulumn number of the cursor for the given script</param>
            <returns>SymbolReference of found symbol</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindCommandAtPosition(System.Management.Automation.Language.Ast,System.Int32,System.Int32)">
            <summary>
            Finds the symbol (always Command type) at a given file location
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="lineNumber">The line number of the cursor for the given script</param>
            <param name="columnNumber">The column number of the cursor for the given script</param>
            <returns>SymbolReference of found command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindReferencesOfSymbol(System.Management.Automation.Language.Ast,Microsoft.PowerShell.EditorServices.SymbolReference,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Finds all references (including aliases) in a script for the given symbol
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="symbolReference">The symbol that we are looking for referneces of</param>
            <param name="CmdletToAliasDictionary">Dictionary maping cmdlets to aliases for finding alias references</param>
            <param name="AliasToCmdletDictionary">Dictionary maping aliases to cmdlets for finding alias references</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindReferencesOfSymbol(System.Management.Automation.Language.ScriptBlockAst,Microsoft.PowerShell.EditorServices.SymbolReference,System.Boolean)">
            <summary>
            Finds all references (not including aliases) in a script for the given symbol
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="foundSymbol">The symbol that we are looking for referneces of</param>
            <param name="needsAliases">If this reference search needs aliases.
            This should always be false and used for occurence requests</param>
            <returns>A collection of SymbolReference objects that are refrences to the symbolRefrence
            not including aliases</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindDefinitionOfSymbol(System.Management.Automation.Language.Ast,Microsoft.PowerShell.EditorServices.SymbolReference)">
            <summary>
            Finds the definition of the symbol 
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="symbolReference">The symbol that we are looking for the definition of</param>
            <returns>A SymbolReference of the definition of the symbolReference</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindSymbolsInDocument(System.Management.Automation.Language.Ast,System.Version)">
            <summary>
            Finds all symbols in a script
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <param name="powerShellVersion">The PowerShell version the Ast was generated from</param>
            <returns>A collection of SymbolReference objects</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.AstOperations.FindDotSourcedIncludes(System.Management.Automation.Language.Ast)">
            <summary>
            Finds all files dot sourced in a script
            </summary>
            <param name="scriptAst">The abstract syntax tree of the given script</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.CommandHelpers">
            <summary>
            Provides utility methods for working with PowerShell commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CommandHelpers.GetCommandInfo(System.String,Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Gets the CommandInfo instance for a command with a particular name.
            </summary>
            <param name="commandName">The name of the command.</param>
            <param name="powerShellContext">The PowerShellContext to use for running Get-Command.</param>
            <returns>A CommandInfo object with details about the specified command.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CommandHelpers.GetCommandSynopsis(System.Management.Automation.CommandInfo,Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Gets the command's "Synopsis" documentation section.
            </summary>
            <param name="commandInfo">The CommandInfo instance for the command.</param>
            <param name="powerShellContext">The PowerShellContext to use for getting command documentation.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.CompletionResults">
            <summary>
            Provides the results of a single code completion request.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionResults.Completions">
            <summary>
            Gets the completions that were found during the 
            completion request.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionResults.ReplacedRange">
            <summary>
            Gets the range in the buffer that should be replaced by this
            completion result.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CompletionResults.#ctor">
            <summary>
            Creates an empty CompletionResults instance.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.CompletionType">
            <summary>
            Enumerates the completion types that may be returned.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Unknown">
            <summary>
            Completion type is unknown, either through being uninitialized or
            having been created from an unsupported CompletionResult that was
            returned by the PowerShell engine.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Command">
            <summary>
            Identifies a completion for a command.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Method">
            <summary>
            Identifies a completion for a .NET method.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.ParameterName">
            <summary>
            Identifies a completion for a command parameter name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.ParameterValue">
            <summary>
            Identifies a completion for a command parameter value.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Property">
            <summary>
            Identifies a completion for a .NET property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Variable">
            <summary>
            Identifies a completion for a variable name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Namespace">
            <summary>
            Identifies a completion for a namespace.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Type">
            <summary>
            Identifies a completion for a .NET type name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Keyword">
            <summary>
            Identifies a completion for a PowerShell language keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.CompletionType.Path">
            <summary>
            Identifies a completion for a provider path (like a file system path).
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.CompletionDetails">
            <summary>
            Provides the details about a single completion result.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionDetails.CompletionText">
            <summary>
            Gets the text that will be used to complete the statement
            at the requested file offset.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionDetails.ListItemText">
            <summary>
            Gets the text that should be dispayed in a drop-down completion list.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionDetails.ToolTipText">
            <summary>
            Gets the text that can be used to display a tooltip for
            the statement at the requested file offset.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionDetails.SymbolTypeName">
            <summary>
            Gets the name of the type which this symbol represents.
            If the symbol doesn't have an inherent type, null will
            be returned.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.CompletionDetails.CompletionType">
            <summary>
            Gets the CompletionType which identifies the type of this completion.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CompletionDetails.Equals(System.Object)">
            <summary>
            Compares two CompletionResults instances for equality.
            </summary>
            <param name="obj">The potential CompletionResults instance to compare.</param>
            <returns>True if the CompletionResults instances have the same details.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.CompletionDetails.GetHashCode">
            <summary>
            Returns the hash code for this CompletionResults instance.
            </summary>
            <returns>The hash code for this CompletionResults instance.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindCommandVisitor">
            <summary>
            The vistior used to find the commandAst of a specific location in an AST
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindCommandVisitor.IsPositionInExtent(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.IScriptExtent)">
            <summary>
            Is the position of the given location is in the range of the start 
            of the first element to the character before the second element
            </summary>
            <param name="firstExtent">The script extent of the first element of the command ast</param>
            <param name="secondExtent">The script extent of the second element of the command ast</param>
            <returns>True if the given position is in the range of the start of 
            the first element to the character before the second element</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindDeclartionVisitor">
            <summary>
            The vistor used to find the defintion of a symbol
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindDeclartionVisitor.VisitFunctionDefinition(System.Management.Automation.Language.FunctionDefinitionAst)">
            <summary>
            Decides if the current function defintion is the right defition
            for the symbol being searched for. The defintion of the symbol will be a of type 
            SymbolType.Function and have the same name as the symbol
            </summary>
            <param name="functionDefinitionAst">A FunctionDefinitionAst in the script's AST</param>
            <returns>A descion to stop searching if the right FunctionDefinitionAst was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindDeclartionVisitor.VisitVariableExpression(System.Management.Automation.Language.VariableExpressionAst)">
            <summary>
            Decides if the current variable expression is the right defition for 
            the symbol being searched for. The defintion of the symbol will be a of type 
            SymbolType.Variable and have the same name as the symbol
            </summary>
            <param name="variableExpressionAst">A FunctionDefinitionAst in the script's AST</param>
            <returns>A descion to stop searching if the right VariableExpressionAst was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindDotSourcedVisitor">
            <summary>
            The vistor used to find the dont sourced files in an AST
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FindDotSourcedVisitor.DotSourcedFiles">
            <summary>
            A hash set of the dot sourced files (because we don't want duplicates)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindDotSourcedVisitor.VisitCommand(System.Management.Automation.Language.CommandAst)">
            <summary>
            Checks to see if the command invocation is a dot
            in order to find a dot sourced file
            </summary>
            <param name="commandAst">A CommandAst object in the script's AST</param>
            <returns>A descion to stop searching if the right commandAst was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindOccurrencesResult">
            <summary>
            A class for the found occurences of a symbol.
            It contains a collection of symbol references. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FindOccurrencesResult.FoundOccurrences">
            <summary>
            Gets the collection of SymboleReferences for the all occurences of the symbol 
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindReferencesResult">
            <summary>
            A class to contain the found references of a symbol.
            It contains a collection of symbol references, the symbol name, and the symbol's file offset
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FindReferencesResult.SymbolName">
            <summary>
            Gets the name of the symbol
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FindReferencesResult.SymbolFileOffset">
            <summary>
            Gets the file offset (location based on line and column number) of the symbol
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FindReferencesResult.FoundReferences">
            <summary>
            Gets the collection of SymboleReferences for the all references to the symbol 
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindReferencesVisitor">
            <summary>
            The visitor used to find the references of a symbol in a script's AST
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.#ctor(Microsoft.PowerShell.EditorServices.SymbolReference,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor used when searching for aliases is needed
            </summary>
            <param name="symbolReference">The found symbolReference that other symbols are being compared to</param>
            <param name="CmdletToAliasDictionary">Dictionary maping cmdlets to aliases for finding alias references</param>
            <param name="AliasToCmdletDictionary">Dictionary maping aliases to cmdlets for finding alias references</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.#ctor(Microsoft.PowerShell.EditorServices.SymbolReference)">
            <summary>
            Constructor used when searching for aliases is not needed
            </summary>
            <param name="foundSymbol">The found symbolReference that other symbols are being compared to</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.VisitCommand(System.Management.Automation.Language.CommandAst)">
            <summary>
            Decides if the current command is a reference of the symbol being searched for.
            A reference of the symbol will be a of type SymbolType.Function 
            and have the same name as the symbol
            </summary>
            <param name="commandAst">A CommandAst in the script's AST</param>
            <returns>A visit action that continues the search for references</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.VisitFunctionDefinition(System.Management.Automation.Language.FunctionDefinitionAst)">
            <summary>
            Decides if the current function defintion is a reference of the symbol being searched for.
            A reference of the symbol will be a of type SymbolType.Function and have the same name as the symbol
            </summary>
            <param name="functionDefinitionAst">A functionDefinitionAst in the script's AST</param>
            <returns>A visit action that continues the search for references</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.VisitCommandParameter(System.Management.Automation.Language.CommandParameterAst)">
            <summary>
            Decides if the current function defintion is a reference of the symbol being searched for.
            A reference of the symbol will be a of type SymbolType.Parameter and have the same name as the symbol 
            </summary>
            <param name="commandParameterAst">A commandParameterAst in the script's AST</param>
            <returns>A visit action that continues the search for references</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindReferencesVisitor.VisitVariableExpression(System.Management.Automation.Language.VariableExpressionAst)">
            <summary>
            Decides if the current function defintion is a reference of the symbol being searched for.
            A reference of the symbol will be a of type SymbolType.Variable and have the same name as the symbol  
            </summary>
            <param name="variableExpressionAst">A variableExpressionAst in the script's AST</param>
            <returns>A visit action that continues the search for references</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor">
            <summary>
            The visitor used to find all the symbols (function and class defs) in the AST.
            </summary>
            <remarks>
            Requires PowerShell v3 or higher
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor.VisitFunctionDefinition(System.Management.Automation.Language.FunctionDefinitionAst)">
            <summary>
            Adds each function defintion as a 
            </summary>
            <param name="functionDefinitionAst">A functionDefinitionAst object in the script's AST</param>
            <returns>A decision to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor.VisitVariableExpression(System.Management.Automation.Language.VariableExpressionAst)">
            <summary>
             Checks to see if this variable expression is the symbol we are looking for.
            </summary>
            <param name="variableExpressionAst">A VariableExpressionAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor2">
            <summary>
            The visitor used to find all the symbols (function and class defs) in the AST. 
            </summary>
            <remarks>
            Requires PowerShell v5 or higher
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor2.VisitFunctionDefinition(System.Management.Automation.Language.FunctionDefinitionAst)">
            <summary>
            Adds each function defintion as a 
            </summary>
            <param name="functionDefinitionAst">A functionDefinitionAst object in the script's AST</param>
            <returns>A decision to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolsVisitor2.VisitVariableExpression(System.Management.Automation.Language.VariableExpressionAst)">
            <summary>
             Checks to see if this variable expression is the symbol we are looking for.
            </summary>
            <param name="variableExpressionAst">A VariableExpressionAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FindSymbolVisitor">
            <summary>
            The visitor used to find the the symbol at a specfic location in the AST
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolVisitor.VisitCommand(System.Management.Automation.Language.CommandAst)">
            <summary>
            Checks to see if this command ast is the symbol we are looking for.
            </summary>
            <param name="commandAst">A CommandAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolVisitor.VisitFunctionDefinition(System.Management.Automation.Language.FunctionDefinitionAst)">
            <summary>
            Checks to see if this function definition is the symbol we are looking for.
            </summary>
            <param name="functionDefinitionAst">A functionDefinitionAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolVisitor.VisitCommandParameter(System.Management.Automation.Language.CommandParameterAst)">
            <summary>
            Checks to see if this command parameter is the symbol we are looking for.
            </summary>
            <param name="commandParameterAst">A CommandParameterAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolVisitor.VisitVariableExpression(System.Management.Automation.Language.VariableExpressionAst)">
            <summary>
             Checks to see if this variable expression is the symbol we are looking for.
            </summary>
            <param name="variableExpressionAst">A VariableExpressionAst object in the script's AST</param>
            <returns>A descion to stop searching if the right symbol was found, 
            or a decision to continue if it wasn't found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FindSymbolVisitor.IsPositionInExtent(System.Management.Automation.Language.IScriptExtent)">
            <summary>
            Is the position of the given location is in the ast's extent
            </summary>
            <param name="extent">The script extent of the element</param>
            <returns>True if the given position is in the range of the element's extent </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.GetDefinitionResult">
            <summary>
            A class to contain the found defintion of a symbol.
            It contains the symbol reference of the defintion
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.GetDefinitionResult.FoundDefinition">
            <summary>
            Gets the symbolReference of the found definition
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.GetDefinitionResult.#ctor(Microsoft.PowerShell.EditorServices.SymbolReference)">
            <summary>
            Constructs an instance of a GetDefinitionResut
            </summary>
            <param name="symRef">The symbolRefernece for the found definition</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.LanguageService">
            <summary>
            Provides a high-level service for performing code completion and
            navigation operations on PowerShell scripts.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Constructs an instance of the LanguageService class and uses
            the given Runspace to execute language service operations.
            </summary>
            <param name="powerShellContext">
            The PowerShellContext in which language service operations will be executed.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.GetCompletionsInFile(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Gets completions for a statement contained in the given
            script file at the specified line and column position.
            </summary>
            <param name="scriptFile">
            The script file in which completions will be gathered.
            </param>
            <param name="lineNumber">
            The 1-based line number at which completions will be gathered.
            </param>
            <param name="columnNumber">
            The 1-based column number at which completions will be gathered.
            </param>
            <returns>
            A CommandCompletion instance completions for the identified statement.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.GetCompletionDetailsInFile(Microsoft.PowerShell.EditorServices.ScriptFile,System.String)">
            <summary>
            Finds command completion details for the script given a file location 
            </summary>
            <param name="file">The details and contents of a open script file</param>
            <param name="entryName">The name of the suggestion that needs details</param>
            <returns>CompletionResult object (contains information about the command completion)</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindSymbolAtLocation(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Finds the symbol in the script given a file location
            </summary>
            <param name="scriptFile">The details and contents of a open script file</param>
            <param name="lineNumber">The line number of the cursor for the given script</param>
            <param name="columnNumber">The coulumn number of the cursor for the given script</param>
            <returns>A SymbolReference of the symbol found at the given location
            or null if there is no symbol at that location 
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindSymbolDetailsAtLocation(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Finds the details of the symbol at the given script file location.
            </summary>
            <param name="scriptFile">The ScriptFile in which the symbol can be located.</param>
            <param name="lineNumber">The line number at which the symbol can be located.</param>
            <param name="columnNumber">The column number at which the symbol can be located.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindSymbolsInFile(Microsoft.PowerShell.EditorServices.ScriptFile)">
            <summary>
            Finds all the symbols in a file.
            </summary>
            <param name="scriptFile">The ScriptFile in which the symbol can be located.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindReferencesOfSymbol(Microsoft.PowerShell.EditorServices.SymbolReference,Microsoft.PowerShell.EditorServices.ScriptFile[])">
            <summary>
            Finds all the references of a symbol
            </summary>
            <param name="foundSymbol">The symbol to find all references for</param>
            <param name="referencedFiles">An array of scriptFiles too search for references in</param>
            <returns>FindReferencesResult</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.GetDefinitionOfSymbol(Microsoft.PowerShell.EditorServices.ScriptFile,Microsoft.PowerShell.EditorServices.SymbolReference,Microsoft.PowerShell.EditorServices.Workspace)">
            <summary>
            Finds the definition of a symbol in the script file or any of the
            files that it references.
            </summary>
            <param name="sourceFile">The initial script file to be searched for the symbol's definition.</param>
            <param name="foundSymbol">The symbol for which a definition will be found.</param>
            <param name="workspace">The Workspace to which the ScriptFile belongs.</param>
            <returns>The resulting GetDefinitionResult for the symbol's definition.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindOccurrencesInFile(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Finds all the occurences of a symbol in the script given a file location
            </summary>
            <param name="file">The details and contents of a open script file</param>
            <param name="lineNumber">The line number of the cursor for the given script</param>
            <param name="columnNumber">The coulumn number of the cursor for the given script</param>
            <returns>FindOccurrencesResult</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.FindParameterSetsInFile(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Finds the parameter set hints of a specific command (determined by a given file location)
            </summary>
            <param name="file">The details and contents of a open script file</param>
            <param name="lineNumber">The line number of the cursor for the given script</param>
            <param name="columnNumber">The coulumn number of the cursor for the given script</param>
            <returns>ParameterSetSignatures</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.LanguageService.GetAliases">
            <summary>
            Gets all aliases found in the runspace
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ParameterSetSignatures">
            <summary>
            A class for containing the commandName, the command's
            possible signatures, and the script extent of the command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterSetSignatures.CommandName">
            <summary>
            Gets the name of the command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterSetSignatures.Signatures">
            <summary>
            Gets the collection of signatures for the command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterSetSignatures.ScriptRegion">
            <summary>
            Gets the script extent of the command
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ParameterSetSignatures.#ctor(System.Collections.Generic.IEnumerable{System.Management.Automation.CommandParameterSetInfo},Microsoft.PowerShell.EditorServices.SymbolReference)">
            <summary>
            Constructs an instance of a ParameterSetSignatures object
            </summary>
            <param name="commandInfoSet">Collection of parameter set info</param>
            <param name="foundSymbol"> The SymbolReference of the command</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ParameterSetSignature">
            <summary>
            A class for containing the signature text and the collection of parameters for a signature
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterSetSignature.SignatureText">
            <summary>
            Gets the signature text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterSetSignature.Parameters">
            <summary>
            Gets the collection of parameters for the signature
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ParameterSetSignature.#ctor(System.Management.Automation.CommandParameterSetInfo)">
            <summary>
            Constructs an instance of a ParameterSetSignature
            </summary>
            <param name="commandParamInfoSet">Collection of parameter info</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ParameterInfo">
            <summary>
            A class for containing the parameter info of a parameter
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterInfo.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterInfo.Position">
            <summary>
            Gets the position of the parameter
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterInfo.IsMandatory">
            <summary>
            Gets a boolean for whetheer or not the parameter is required
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ParameterInfo.HelpMessage">
            <summary>
            Gets the help message of the parameter
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ParameterInfo.#ctor(System.Management.Automation.CommandParameterInfo)">
            <summary>
            Constructs an instance of a ParameterInfo object
            </summary>
            <param name="parameterInfo">Parameter info of the parameter</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ScriptExtent">
            <summary>
            Provides a default IScriptExtent implementation
            containing details about a section of script content
            in a file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.File">
            <summary>
            Gets the file path of the script file in which this extent is contained.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.StartColumnNumber">
            <summary>
            Gets or sets the starting column number of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.StartLineNumber">
            <summary>
            Gets or sets the starting line number of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.StartOffset">
            <summary>
            Gets or sets the starting file offset of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.StartScriptPosition">
            <summary>
            Gets or sets the starting script position of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.Text">
            <summary>
            Gets or sets the text that is contained within the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.EndColumnNumber">
            <summary>
            Gets or sets the ending column number of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.EndLineNumber">
            <summary>
            Gets or sets the ending line number of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.EndOffset">
            <summary>
            Gets or sets the ending file offset of the extent.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptExtent.EndScriptPosition">
            <summary>
            Gets the ending script position of the extent.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.SymbolDetails">
            <summary>
            Provides detailed information for a given symbol.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolDetails.SymbolReference">
            <summary>
            Gets the original symbol reference which was used to gather details.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolDetails.DisplayString">
            <summary>
            Gets the display string for this symbol.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolDetails.Documentation">
            <summary>
            Gets the documentation string for this symbol.  Returns an
            empty string if the symbol has no documentation.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.SymbolReference">
            <summary>
            A class that holds the type, name, script extent, and source line of a symbol
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolReference.SymbolType">
            <summary>
            Gets the symbol's type
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolReference.SymbolName">
            <summary>
            Gets the name of the symbol
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolReference.ScriptRegion">
            <summary>
            Gets the script extent of the symbol
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolReference.SourceLine">
            <summary>
            Gets the contents of the line the given symbol is on
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SymbolReference.FilePath">
            <summary>
            Gets the path of the file in which the symbol was found.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.SymbolReference.#ctor(Microsoft.PowerShell.EditorServices.SymbolType,System.Management.Automation.Language.IScriptExtent,System.String,System.String)">
            <summary>
            Constructs and instance of a SymbolReference
            </summary>
            <param name="symbolType">The higher level type of the symbol</param>
            <param name="scriptExtent">The script extent of the symbol</param>
            <param name="filePath">The file path of the symbol</param>
            <param name="sourceLine">The line contents of the given symbol (defaults to empty string)</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.SymbolType">
            <summary>
            A way to define symbols on a higher level
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Unknown">
            <summary>
            The symbol type is unknown
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Variable">
            <summary>
            The symbol is a vairable
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Function">
            <summary>
            The symbol is a function
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Parameter">
            <summary>
            The symbol is a parameter
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Configuration">
            <summary>
            The symbol is a DSC configuration
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.SymbolType.Workflow">
            <summary>
            The symbol is a workflow
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ChoiceDetails">
            <summary>
            Contains the details about a choice that should be displayed
            to the user.  This class is meant to be serializable to the 
            user's UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ChoiceDetails.Label">
            <summary>
            Gets the label for the choice.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ChoiceDetails.HotKeyIndex">
            <summary>
            Gets the index of the hot key character for the choice.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ChoiceDetails.HotKeyCharacter">
            <summary>
            Gets the hot key character.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ChoiceDetails.HelpMessage">
            <summary>
            Gets the help string that describes the choice.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ChoiceDetails.#ctor">
            <summary>
            Creates an instance of the ChoiceDetails class with
            the provided details.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ChoiceDetails.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the ChoiceDetails class with
            the provided details.
            </summary>
            <param name="label">
            The label of the choice.  An ampersand '&amp;' may be inserted
            before the character that will used as a hot key for the
            choice.
            </param>
            <param name="helpMessage">
            A help message that describes the purpose of the choice.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ChoiceDetails.Create(System.Management.Automation.Host.ChoiceDescription)">
            <summary>
            Creates a new instance of the ChoicePromptDetails class
            based on a ChoiceDescription from the PowerShell layer.
            </summary>
            <param name="choiceDescription">
            A ChoiceDescription on which this instance will be based.
            </param>
            <returns>A new ChoicePromptDetails instance.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ChoiceDetails.MatchesInput(System.String)">
            <summary>
            Compares an input string to this choice to determine
            whether the input string is a match.
            </summary>
            <param name="inputString">
            The input string to compare to the choice.
            </param>
            <returns>True if the input string is a match for the choice.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.EditorSession">
            <summary>
            Manages a single session for all editor services.  This 
            includes managing all open script files for the session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.Workspace">
            <summary>
            Gets the Workspace instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.PowerShellContext">
            <summary>
            Gets the PowerShellContext instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.LanguageService">
            <summary>
            Gets the LanguageService instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.AnalysisService">
            <summary>
            Gets the AnalysisService instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.DebugService">
            <summary>
            Gets the DebugService instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.ConsoleService">
            <summary>
            Gets the ConsoleService instance for this session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.EditorSession.ExtensionService">
            <summary>
            Gets the ExtensionService instance for this session.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.EditorSession.StartSession">
            <summary>
            Starts the session using the provided IConsoleHost implementation
            for the ConsoleService.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.EditorSession.StartSession(Microsoft.PowerShell.EditorServices.Session.HostDetails)">
            <summary>
            Starts the session using the provided IConsoleHost implementation
            for the ConsoleService.
            </summary>
            <param name="hostDetails">
            Provides details about the host application.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.EditorSession.RestartAnalysisService(System.String)">
            <summary>
            Restarts the AnalysisService so it can be configured with a new settings file.
            </summary>
            <param name="settingsPath">Path to the settings file.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.EditorSession.Dispose">
            <summary>
            Disposes of any Runspaces that were created for the
            services used in this session.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Session.HostDetails">
            <summary>
            Contains details about the current host application (most
            likely the editor which is using the host process).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Session.HostDetails.DefaultHostName">
            <summary>
            The default host name for PowerShell Editor Services.  Used
            if no host name is specified by the host application.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Session.HostDetails.DefaultHostProfileId">
            <summary>
            The default host ID for PowerShell Editor Services.  Used
            for the host-specific profile path if no host ID is specified.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Session.HostDetails.DefaultHostVersion">
            <summary>
            The default host version for PowerShell Editor Services.  If
            no version is specified by the host application, we use 0.0.0
            to indicate a lack of version.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Session.HostDetails.Default">
            <summary>
            The default host details in a HostDetails object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.HostDetails.Name">
            <summary>
            Gets the name of the host.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.HostDetails.ProfileId">
            <summary>
            Gets the profile ID of the host, used to determine the
            host-specific profile path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.HostDetails.Version">
            <summary>
            Gets the version of the host.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Session.HostDetails.#ctor(System.String,System.String,System.Version)">
            <summary>
            Creates an instance of the HostDetails class.
            </summary>
            <param name="name">
            The display name for the host, typically in the form of
            "[Application Name] Host".
            </param>
            <param name="profileId">
            The identifier of the PowerShell host to use for its profile path.
            loaded. Used to resolve a profile path of the form 'X_profile.ps1'
            where 'X' represents the value of hostProfileId.  If null, a default
            will be used.
            </param>
            <param name="version">The host application's version.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Session.ProfilePaths">
            <summary>
            Provides profile path resolution behavior relative to the name
            of a particular PowerShell host.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.AllHostsProfileName">
            <summary>
            The file name for the "all hosts" profile.  Also used as the
            suffix for the host-specific profile filenames.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.AllUsersAllHosts">
            <summary>
            Gets the profile path for all users, all hosts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.AllUsersCurrentHost">
            <summary>
            Gets the profile path for all users, current host.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.CurrentUserAllHosts">
            <summary>
            Gets the profile path for the current user, all hosts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.CurrentUserCurrentHost">
            <summary>
            Gets the profile path for the current user and host.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.#ctor(System.String,System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Creates a new instance of the ProfilePaths class.
            </summary>
            <param name="hostProfileId">
            The identifier of the host used in the host-specific X_profile.ps1 filename.</param>
            <param name="runspace">A runspace used to gather profile path locations.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Session.ProfilePaths.GetLoadableProfilePaths">
            <summary>
            Gets the list of profile paths that exist on the filesystem.
            </summary>
            <returns>An IEnumerable of profile path strings to be loaded.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.OutputType">
            <summary>
            Enumerates the types of output lines that will be sent
            to an IConsoleHost implementation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.OutputType.Normal">
            <summary>
            A normal output line, usually written with the or Write-Host or 
            Write-Output cmdlets.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.OutputType.Debug">
            <summary>
            A debug output line, written with the Write-Debug cmdlet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.OutputType.Verbose">
            <summary>
            A verbose output line, written with the Write-Verbose cmdlet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.OutputType.Warning">
            <summary>
            A warning output line, written with the Write-Warning cmdlet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.OutputType.Error">
            <summary>
            An error output line, written with the Write-Error cmdlet or
            as a result of some error during PowerShell pipeline execution.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs">
            <summary>
            Provides details about output that has been written to the
            PowerShell host.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.OutputText">
            <summary>
            Gets the text of the output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.OutputType">
            <summary>
            Gets the type of the output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.IncludeNewLine">
            <summary>
            Gets a boolean which indicates whether a newline 
            should be written after the output.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.ForegroundColor">
            <summary>
            Gets the foreground color of the output text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.BackgroundColor">
            <summary>
            Gets the background color of the output text.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.OutputWrittenEventArgs.#ctor(System.String,System.Boolean,Microsoft.PowerShell.EditorServices.OutputType,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Creates an instance of the OutputWrittenEventArgs class.
            </summary>
            <param name="outputText">The text of the output.</param>
            <param name="includeNewLine">A boolean which indicates whether a newline should be written after the output.</param>
            <param name="outputType">The type of the output.</param>
            <param name="foregroundColor">The foreground color of the output text.</param>
            <param name="backgroundColor">The background color of the output text.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult">
            <summary>
            Enumerates the possible execution results that can occur after
            executing a command or script.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult.NotFinished">
            <summary>
            Indicates that execution is not yet finished.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult.Failed">
            <summary>
            Indicates that execution has failed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult.Aborted">
            <summary>
            Indicates that execution was aborted by the user.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult.Stopped">
            <summary>
            Indicates that execution was stopped by the debugger.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellExecutionResult.Completed">
            <summary>
            Indicates that execution completed successfully.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.PowerShellContext">
            <summary>
            Manages the lifetime and usage of a PowerShell session.
            Handles nested PowerShell prompts and also manages execution of 
            commands whether inside or outside of the debugger.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.PowerShellContext.IsDebuggerStopped">
            <summary>
            Gets a boolean that indicates whether the debugger is currently stopped,
            either at a breakpoint or because the user broke execution.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.PowerShellContext.SessionState">
            <summary>
            Gets the current state of the session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.PowerShellContext.PowerShellVersion">
            <summary>
            PowerShell Version of the current runspace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.PowerShellContext.ConsoleHost">
            <summary>
            Gets or sets an IConsoleHost implementation for use in
            writing output to the console.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.#ctor">
            <summary>
            Initializes a new instance of the PowerShellContext class and
            opens a runspace to be used for the session.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.#ctor(Microsoft.PowerShell.EditorServices.Session.HostDetails)">
            <summary>
            Initializes a new instance of the PowerShellContext class and
            opens a runspace to be used for the session.
            </summary>
            <param name="hostDetails">Provides details about the host application.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.#ctor(Microsoft.PowerShell.EditorServices.Session.HostDetails,System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Initializes a new instance of the PowerShellContext class using
            an existing runspace for the session.
            </summary>
            <param name="initialRunspace">The initial runspace to use for this instance.</param>
            <param name="hostDetails">Provides details about the host application.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.GetRunspaceHandle">
            <summary>
            Gets a RunspaceHandle for the session's runspace.  This
            handle is used to gain temporary ownership of the runspace
            so that commands can be executed against it directly.
            </summary>
            <returns>A RunspaceHandle instance that gives access to the session's runspace.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.GetRunspaceHandle(System.Threading.CancellationToken)">
            <summary>
            Gets a RunspaceHandle for the session's runspace.  This
            handle is used to gain temporary ownership of the runspace
            so that commands can be executed against it directly.
            </summary>
            <param name="cancellationToken">A CancellationToken that can be used to cancel the request.</param>
            <returns>A RunspaceHandle instance that gives access to the session's runspace.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.ExecuteCommand``1(System.Management.Automation.PSCommand,System.Boolean,System.Boolean)">
            <summary>
            Executes a PSCommand against the session's runspace and returns
            a collection of results of the expected type.
            </summary>
            <typeparam name="TResult">The expected result type.</typeparam>
            <param name="psCommand">The PSCommand to be executed.</param>
            <param name="sendOutputToHost">
            If true, causes any output written during command execution to be written to the host.
            </param>
            <param name="sendErrorToHost">
            If true, causes any errors encountered during command execution to be written to the host.
            </param>
            <returns>
            An awaitable Task which will provide results once the command
            execution completes.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.ExecuteCommand(System.Management.Automation.PSCommand)">
            <summary>
            Executes a PSCommand in the session's runspace without
            expecting to receive any result.
            </summary>
            <param name="psCommand">The PSCommand to be executed.</param>
            <returns>
            An awaitable Task that the caller can use to know when
            execution completes.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.ExecuteScriptString(System.String)">
            <summary>
            Executes a script string in the session's runspace.
            </summary>
            <param name="scriptString">The script string to execute.</param>
            <returns>A Task that can be awaited for the script completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.ExecuteScriptString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Executes a script string in the session's runspace.
            </summary>
            <param name="scriptString">The script string to execute.</param>
            <param name="writeInputToHost">If true, causes the script string to be written to the host.</param>
            <param name="writeOutputToHost">If true, causes the script output to be written to the host.</param>
            <returns>A Task that can be awaited for the script completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.ExecuteScriptAtPath(System.String,System.String)">
            <summary>
            Executes a script file at the specified path.
            </summary>
            <param name="scriptPath">The path to the script file to execute.</param>
            <param name="arguments">Arguments to pass to the script.</param>
            <returns>A Task that can be awaited for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.LoadHostProfiles">
            <summary>
            Loads PowerShell profiles for the host from the
            standard system locations.  Only the profile paths which
            exist are loaded.
            </summary>
            <returns>A Task that can be awaited for completion.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.AbortExecution">
            <summary>
            Causes the current execution to be aborted no matter what state
            it is currently in.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.BreakExecution">
            <summary>
            Causes the debugger to break execution wherever it currently is.
            This method is internal because the real Break API is provided
            by the DebugService.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.Dispose">
            <summary>
            Disposes the runspace and any other resources being used
            by this PowerShellContext.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.SetWorkingDirectory(System.String)">
            <summary>
            Sets the current working directory of the powershell context.  The path should be
            unescaped before calling this method.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.EscapePath(System.String,System.Boolean)">
            <summary>
            Returns the passed in path with the [ and ] characters escaped. Escaping spaces is optional.
            </summary>
            <param name="path">The path to process.</param>
            <param name="escapeSpaces">Specify True to escape spaces in the path, otherwise False.</param>
            <returns>The path with [ and ] escaped.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.PowerShellContext.UnescapePath(System.String)">
            <summary>
            Unescapes any escaped [, ] or space characters. Typically use this before calling a
            .NET API that doesn't understand PowerShell escaped chars.
            </summary>
            <param name="path">The path to unescape.</param>
            <returns>The path with the ` character before [, ] and spaces removed.</returns>
        </member>
        <member name="E:Microsoft.PowerShell.EditorServices.PowerShellContext.SessionStateChanged">
            <summary>
            Raised when the state of the session has changed.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.PowerShellContext.PipelineExecutionRequest`1">
            <summary>
            Contains details relating to a request to execute a
            command on the PowerShell pipeline thread.
            </summary>
            <typeparam name="TResult">The expected result type of the execution.</typeparam>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.PowerShellContextState">
            <summary>
            Enumerates the possible states for a PowerShellContext.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.Unknown">
            <summary>
            Indicates an unknown, potentially uninitialized state.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.NotStarted">
            <summary>
            Indicates the state where the session is starting but 
            not yet fully initialized.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.Ready">
            <summary>
            Indicates that the session is ready to accept commands
            for execution.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.Running">
            <summary>
            Indicates that the session is currently running a command.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.Aborting">
            <summary>
            Indicates that the session is aborting the current execution.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.PowerShellContextState.Disposed">
            <summary>
            Indicates that the session is already disposed and cannot
            accept further execution requests.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ProgressDetails">
            <summary>
            Provides details about the progress of a particular activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ProgressDetails.PercentComplete">
            <summary>
            Gets the percentage of the activity that has been completed.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.RunspaceHandle">
            <summary>
            Provides a handle to the runspace that is managed by
            a PowerShellContext.  The holder of this handle.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.RunspaceHandle.Runspace">
            <summary>
            Gets the runspace that is held by this handle.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.RunspaceHandle.#ctor(System.Management.Automation.Runspaces.Runspace,Microsoft.PowerShell.EditorServices.PowerShellContext)">
            <summary>
            Initializes a new instance of the RunspaceHandle class using the
            given runspace.
            </summary>
            <param name="runspace">The runspace instance which is temporarily owned by this handle.</param>
            <param name="powerShellContext">The PowerShellContext instance which manages the runspace.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.RunspaceHandle.Dispose">
            <summary>
            Disposes the RunspaceHandle once the holder is done using it.
            Causes the handle to be released back to the PowerShellContext.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ConsoleServicePSHost">
            <summary>
            Provides an implementation of the PSHost class for the
            ConsoleService and routes its calls to an IConsoleHost
            implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHost.#ctor(Microsoft.PowerShell.EditorServices.Session.HostDetails)">
            <summary>
            Creates a new instance of the ConsoleServicePSHost class
            with the given IConsoleHost implementation.
            </summary>
            <param name="hostDetails">
            Provides details about the host application.
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface">
            <summary>
            Provides an implementation of the PSHostRawUserInterface class
            for the ConsoleService and routes its calls to an IConsoleHost
            implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.#ctor">
            <summary>
            Creates a new instance of the ConsoleServicePSHostRawUserInterface
            class with the given IConsoleHost implementation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.BackgroundColor">
            <summary>
            Gets or sets the background color of the console.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the console.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.BufferSize">
            <summary>
            Gets or sets the size of the console buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.CursorPosition">
            <summary>
            Gets or sets the cursor's position in the console buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.CursorSize">
            <summary>
            Gets or sets the size of the cursor in the console buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.WindowPosition">
            <summary>
            Gets or sets the position of the console's window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.WindowSize">
            <summary>
            Gets or sets the size of the console's window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.WindowTitle">
            <summary>
            Gets or sets the console window's title.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.KeyAvailable">
            <summary>
            Gets a boolean that determines whether a keypress is available.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.MaxPhysicalWindowSize">
            <summary>
            Gets the maximum physical size of the console window.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.MaxWindowSize">
            <summary>
            Gets the maximum size of the console window.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.ReadKey(System.Management.Automation.Host.ReadKeyOptions)">
            <summary>
            Reads the current key pressed in the console.
            </summary>
            <param name="options">Options for reading the current keypress.</param>
            <returns>A KeyInfo struct with details about the current keypress.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.FlushInputBuffer">
            <summary>
            Flushes the current input buffer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.GetBufferContents(System.Management.Automation.Host.Rectangle)">
            <summary>
            Gets the contents of the console buffer in a rectangular area.
            </summary>
            <param name="rectangle">The rectangle inside which buffer contents will be accessed.</param>
            <returns>A BufferCell array with the requested buffer contents.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.ScrollBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            Scrolls the contents of the console buffer.
            </summary>
            <param name="source">The source rectangle to scroll.</param>
            <param name="destination">The destination coordinates by which to scroll.</param>
            <param name="clip">The rectangle inside which the scrolling will be clipped.</param>
            <param name="fill">The cell with which the buffer will be filled.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            Sets the contents of the buffer inside the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle inside which buffer contents will be filled.</param>
            <param name="fill">The BufferCell which will be used to fill the requested space.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.BufferCell[0:,0:])">
            <summary>
            Sets the contents of the buffer at the given coordinate.
            </summary>
            <param name="origin">The coordinate at which the buffer will be changed.</param>
            <param name="contents">The new contents for the buffer at the given coordinate.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostUserInterface">
            <summary>
            Provides an implementation of the PSHostUserInterface class
            for the ConsoleService and routes its calls to an IConsoleHost
            implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ConsoleServicePSHostUserInterface.#ctor">
            <summary>
            Creates a new instance of the ConsoleServicePSHostUserInterface
            class with the given IConsoleHost implementation.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.SessionStateChangedEventArgs">
            <summary>
            Provides details about a change in state of a PowerShellContext.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SessionStateChangedEventArgs.NewSessionState">
            <summary>
            Gets the new state for the session.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SessionStateChangedEventArgs.ExecutionResult">
            <summary>
            Gets the execution result of the operation that caused
            the state change.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.SessionStateChangedEventArgs.ErrorException">
            <summary>
            Gets the exception that caused a failure state or null otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.SessionStateChangedEventArgs.#ctor(Microsoft.PowerShell.EditorServices.PowerShellContextState,Microsoft.PowerShell.EditorServices.PowerShellExecutionResult,System.Exception)">
            <summary>
            Creates a new instance of the SessionStateChangedEventArgs class.
            </summary>
            <param name="newSessionState">The new session state.</param>
            <param name="executionResult">The result of the operation that caused the state change.</param>
            <param name="errorException">An exception that describes the failure, if any.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncContextThread">
            <summary>
            Provides a simplified interface for creating a new thread
            and establishing an AsyncContext in it.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncContextThread.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsyncContextThread class.
            </summary>
            <param name="threadName">
            The name of the thread for debugging purposes.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncContextThread.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a task on the AsyncContextThread.
            </summary>
            <param name="taskReturningFunc">
            A Func which returns the task to be run on the thread.
            </param>
            <returns>
            A Task which can be used to monitor the thread for completion.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncContextThread.Stop">
            <summary>
            Stops the thread task.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1">
            <summary>
            Restricts the invocation of an operation to a specified time
            interval.  Can also cause previous requests to be cancelled
            by new requests within that time window.  Typically used for
            buffering information for an operation or ensuring that an
            operation only runs after some interval.
            </summary>
            <typeparam name="TInvokeArgs">The argument type for the Invoke method.</typeparam>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the AsyncDebouncer class with the
            specified flush interval.  If restartOnInvoke is true, any
            calls to Invoke will cancel previous calls which have not yet
            passed the flush interval.
            </summary>
            <param name="flushInterval">
            A millisecond interval to use for flushing prior Invoke calls.
            </param>
            <param name="restartOnInvoke">
            If true, Invoke calls will reset prior calls which haven't passed the flush interval.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1.Invoke(`0)">
            <summary>
            Invokes the debouncer with the given input.  The debouncer will
            wait for the specified interval before calling the Flush method
            to complete the operation.
            </summary>
            <param name="invokeArgument">
            The argument for this implementation's Invoke method.
            </param>
            <returns>A Task to be awaited until the Invoke is queued.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1.Flush">
            <summary>
            Flushes the latest state regardless of the current interval.
            An AsyncDebouncer MUST NOT invoke its own Flush method otherwise
            deadlocks could occur.
            </summary>
            <returns>A Task to be awaited until Flush completes.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1.OnInvoke(`0)">
            <summary>
            Implemented by the subclass to take the argument for the
            future operation that will be performed by OnFlush.
            </summary>
            <param name="invokeArgument">
            The argument for this implementation's OnInvoke method.
            </param>
            <returns>A Task to be awaited for the invoke to complete.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncDebouncer`1.OnFlush">
            <summary>
            Implemented by the subclass to complete the current operation.
            </summary>
            <returns>A Task to be awaited for the operation to complete.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncLock">
            <summary>
            Provides a simple wrapper over a SemaphoreSlim to allow
            synchronization locking inside of async calls.  Cannot be
            used recursively.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncLock.#ctor">
            <summary>
            Initializes a new instance of the AsyncLock class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncLock.LockAsync">
            <summary>
            Locks
            </summary>
            <returns>A task which has an IDisposable</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains or waits for a lock which can be used to synchronize
            access to a resource.  The wait may be cancelled with the
            given CancellationToken.
            </summary>
            <param name="cancellationToken">
            A CancellationToken which can be used to cancel the lock.
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncLock.LockReleaser">
            <summary>
            Provides an IDisposable wrapper around an AsyncLock so
            that it can easily be used inside of a 'using' block.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1">
            <summary>
            Provides a synchronized queue which can be used from within async
            operations.  This is primarily used for producer/consumer scenarios.
            </summary>
            <typeparam name="T">The type of item contained in the queue.</typeparam>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.IsEmpty">
            <summary>
            Returns true if the queue is currently empty.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.#ctor">
            <summary>
            Initializes an empty instance of the AsyncQueue class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes an instance of the AsyncQueue class, pre-populated
            with the given collection of items.
            </summary>
            <param name="initialItems">
            An IEnumerable containing the initial items with which the queue will
            be populated.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.EnqueueAsync(`0)">
            <summary>
            Enqueues an item onto the end of the queue.
            </summary>
            <param name="item">The item to be added to the queue.</param>
            <returns>
            A Task which can be awaited until the synchronized enqueue
            operation completes.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.DequeueAsync">
            <summary>
            Dequeues an item from the queue or waits asynchronously
            until an item is available.
            </summary>
            <returns>
            A Task which can be awaited until a value can be dequeued.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncQueue`1.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            Dequeues an item from the queue or waits asynchronously
            until an item is available.  The wait can be cancelled
            using the given CancellationToken.
            </summary>
            <param name="cancellationToken">
            A CancellationToken with which a dequeue wait can be cancelled.
            </param>
            <returns>
            A Task which can be awaited until a value can be dequeued.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.AsyncContext">
            <summary>
            Simplifies the setup of a SynchronizationContext for the use
            of async calls in the current thread.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.AsyncContext.Start(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Starts a new ThreadSynchronizationContext, attaches it to
            the thread, and then runs the given async main function.
            </summary>
            <param name="asyncMainFunc">
            The Task-returning Func which represents the "main" function
            for the thread.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.ObjectExtensions.SafeToString(System.Object)">
            <summary>
            Extension to evaluate an object's ToString() method in an exception safe way. This will
            extension method will not throw.
            </summary>
            <param name="obj">The object on which to call ToString()</param>
            <returns>The ToString() return value or a suitable error message is that throws.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.LogLevel">
            <summary>
            Defines the level indicators for log messages.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Utility.LogLevel.Verbose">
            <summary>
            Indicates a verbose log message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Utility.LogLevel.Normal">
            <summary>
            Indicates a normal, non-verbose log message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Utility.LogLevel.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.Utility.LogLevel.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.Logger">
            <summary>
            Provides a simple logging interface.  May be replaced with a
            more robust solution at a later date.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Logger.Initialize(System.String,Microsoft.PowerShell.EditorServices.Utility.LogLevel)">
            <summary>
            Initializes the Logger for the current session.
            </summary>
            <param name="logFilePath">
            Optional. Specifies the path at which log messages will be written.
            </param>
            <param name="minimumLogLevel">
            Optional. Specifies the minimum log message level to write to the log file.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Logger.Close">
            <summary>
            Closes the Logger.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Logger.Write(Microsoft.PowerShell.EditorServices.Utility.LogLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Writes a message to the log file.
            </summary>
            <param name="logLevel">The level at which the message will be written.</param>
            <param name="logMessage">The message text to be written.</param>
            <param name="callerName">The name of the calling method.</param>
            <param name="callerSourceFile">The source file path where the calling method exists.</param>
            <param name="callerLineNumber">The line number of the calling method.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.ThreadSynchronizationContext">
            <summary>
            Provides a SynchronizationContext implementation that can be used
            in console applications or any thread which doesn't have its
            own SynchronizationContext.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.ThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Posts a request for execution to the SynchronizationContext.
            This will be executed on the SynchronizationContext's thread.
            </summary>
            <param name="callback">
            The callback to be invoked on the SynchronizationContext's thread.
            </param>
            <param name="state">
            A state object to pass along to the callback when executed through
            the SynchronizationContext.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.ThreadSynchronizationContext.RunLoopOnCurrentThread">
            <summary>
            Starts the SynchronizationContext message loop on the current thread.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.ThreadSynchronizationContext.EndLoop">
            <summary>
            Ends the SynchronizationContext message loop.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Utility.Validate">
            <summary>
            Provides common validation methods to simplify method
            parameter checks.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsNotNull(System.String,System.Object)">
            <summary>
            Throws ArgumentNullException if value is null.
            </summary>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsWithinRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws ArgumentOutOfRangeException if the value is outside 
            of the given lower and upper limits.
            </summary>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
            <param name="lowerLimit">The lower limit which the value should not be less than.</param>
            <param name="upperLimit">The upper limit which the value should not be greater than.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsLessThan(System.String,System.Int32,System.Int32)">
            <summary>
            Throws ArgumentOutOfRangeException if the value is greater than or equal 
            to the given upper limit.
            </summary>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
            <param name="upperLimit">The upper limit which the value should be less than.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsGreaterThan(System.String,System.Int32,System.Int32)">
            <summary>
            Throws ArgumentOutOfRangeException if the value is less than or equal 
            to the given lower limit.
            </summary>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
            <param name="lowerLimit">The lower limit which the value should be greater than.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsNotEqual``1(System.String,``0,``0)">
            <summary>
            Throws ArgumentException if the value is equal to the undesired value. 
            </summary>
            <typeparam name="TValue">The type of value to be validated.</typeparam>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="undesiredValue">The value that valueToCheck should not equal.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Utility.Validate.IsNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Throws ArgumentException if the value is null, an empty string,
            or a string containing only whitespace.
            </summary>
            <param name="parameterName">The name of the parameter being validated.</param>
            <param name="valueToCheck">The value of the parameter being validated.</param>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.BufferRange">
            <summary>
            Provides details about a range between two positions in
            a file buffer.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.BufferRange.None">
            <summary>
            Provides an instance that represents a range that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BufferRange.Start">
            <summary>
            Gets the start position of the range in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BufferRange.End">
            <summary>
            Gets the end position of the range in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BufferRange.HasRange">
            <summary>
            Returns true if the current range is non-zero, i.e.
            contains valid start and end positions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferRange.#ctor(Microsoft.PowerShell.EditorServices.BufferPosition,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Creates a new instance of the BufferRange class.
            </summary>
            <param name="start">The start position of the range.</param>
            <param name="end">The end position of the range.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the BufferRange class.
            </summary>
            <param name="startLine">The 1-based starting line number of the range.</param>
            <param name="startColumn">The 1-based starting column number of the range.</param>
            <param name="endLine">The 1-based ending line number of the range.</param>
            <param name="endColumn">The 1-based ending column number of the range.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferRange.Equals(System.Object)">
            <summary>
            Compares two instances of the BufferRange class.
            </summary>
            <param name="obj">The object to which this instance will be compared.</param>
            <returns>True if the ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferRange.GetHashCode">
            <summary>
            Calculates a unique hash code that represents this instance.
            </summary>
            <returns>A hash code representing this instance.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FileChange">
            <summary>
            Contains details relating to a content change in an open file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FileChange.InsertString">
            <summary>
            The string which is to be inserted in the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FileChange.Line">
            <summary>
            The 1-based line number where the change starts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FileChange.Offset">
            <summary>
            The 1-based column offset where the change starts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FileChange.EndLine">
            <summary>
            The 1-based line number where the change ends.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.FileChange.EndOffset">
            <summary>
            The 1-based column offset where the change ends.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.BufferPosition">
            <summary>
            Provides details about a position in a file buffer.  All
            positions are expressed in 1-based positions (i.e. the
            first line and column in the file is position 1,1).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.BufferPosition.None">
            <summary>
            Provides an instance that represents a position that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BufferPosition.Line">
            <summary>
            Gets the line number of the position in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.BufferPosition.Column">
            <summary>
            Gets the column number of the position in the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the BufferPosition class.
            </summary>
            <param name="line">The line number of the position.</param>
            <param name="column">The column number of the position.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferPosition.Equals(System.Object)">
            <summary>
            Compares two instances of the BufferPosition class.
            </summary>
            <param name="obj">The object to which this instance will be compared.</param>
            <returns>True if the positions are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferPosition.GetHashCode">
            <summary>
            Calculates a unique hash code that represents this instance.
            </summary>
            <returns>A hash code representing this instance.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferPosition.op_GreaterThan(Microsoft.PowerShell.EditorServices.BufferPosition,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Compares two positions to check if one is greater than the other.
            </summary>
            <param name="positionOne">The first position to compare.</param>
            <param name="positionTwo">The second position to compare.</param>
            <returns>True if positionOne is greater than positionTwo.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.BufferPosition.op_LessThan(Microsoft.PowerShell.EditorServices.BufferPosition,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Compares two positions to check if one is less than the other.
            </summary>
            <param name="positionOne">The first position to compare.</param>
            <param name="positionTwo">The second position to compare.</param>
            <returns>True if positionOne is less than positionTwo.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.FilePosition">
            <summary>
            Provides details and operations for a buffer position in a
            specific file.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FilePosition.#ctor(Microsoft.PowerShell.EditorServices.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Creates a new FilePosition instance for the 1-based line and
            column numbers in the specified file.
            </summary>
            <param name="scriptFile">The ScriptFile in which the position is located.</param>
            <param name="line">The 1-based line number in the file.</param>
            <param name="column">The 1-based column number in the file.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FilePosition.#ctor(Microsoft.PowerShell.EditorServices.ScriptFile,Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Creates a new FilePosition instance for the specified file by
            copying the specified BufferPosition
            </summary>
            <param name="scriptFile">The ScriptFile in which the position is located.</param>
            <param name="copiedPosition">The original BufferPosition from which the line and column will be copied.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FilePosition.AddOffset(System.Int32,System.Int32)">
            <summary>
            Gets a FilePosition relative to this position by adding the
            provided line and column offset relative to the contents of
            the current file.
            </summary>
            <param name="lineOffset">The line offset to add to this position.</param>
            <param name="columnOffset">The column offset to add to this position.</param>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FilePosition.GetLineStart">
            <summary>
            Gets a FilePosition for the line and column position
            of the beginning of the current line after any initial
            whitespace for indentation.
            </summary>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.FilePosition.GetLineEnd">
            <summary>
            Gets a FilePosition for the line and column position
            of the end of the current line.
            </summary>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ScriptFile">
            <summary>
            Contains the details and contents of an open script file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.Id">
            <summary>
            Gets a unique string that identifies this file.  At this time,
            this property returns a normalized version of the value stored
            in the FilePath property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.FilePath">
            <summary>
            Gets the path at which this file resides.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.ClientFilePath">
            <summary>
            Gets the path which the editor client uses to identify this file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.IsAnalysisEnabled">
            <summary>
            Gets or sets a boolean that determines whether
            semantic analysis should be enabled for this file.
            For internal use only.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.IsInMemory">
            <summary>
            Gets a boolean that determines whether this file is
            in-memory or not (either unsaved or non-file content).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.Contents">
            <summary>
            Gets a string containing the full contents of the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.FileRange">
            <summary>
            Gets a BufferRange that represents the entire content
            range of the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.SyntaxMarkers">
            <summary>
            Gets the list of syntax markers found by parsing this
            file's contents.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.FileLines">
            <summary>
            Gets the list of strings for each line of the file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.ScriptAst">
            <summary>
            Gets the ScriptBlockAst representing the parsed script contents.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.ScriptTokens">
            <summary>
            Gets the array of Tokens representing the parsed script contents.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFile.ReferencedFiles">
            <summary>
            Gets the array of filepaths dot sourced in this ScriptFile 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.#ctor(System.String,System.String,System.IO.TextReader,System.Version)">
            <summary>
            Creates a new ScriptFile instance by reading file contents from
            the given TextReader.
            </summary>
            <param name="filePath">The path at which the script file resides.</param>
            <param name="clientFilePath">The path which the client uses to identify the file.</param>
            <param name="textReader">The TextReader to use for reading the file's contents.</param>
            <param name="powerShellVersion">The version of PowerShell for which the script is being parsed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.#ctor(System.String,System.String,System.String,System.Version)">
            <summary>
            Creates a new ScriptFile instance with the specified file contents.
            </summary>
            <param name="filePath">The path at which the script file resides.</param>
            <param name="clientFilePath">The path which the client uses to identify the file.</param>
            <param name="initialBuffer">The initial contents of the script file.</param>
            <param name="powerShellVersion">The version of PowerShell for which the script is being parsed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.GetLine(System.Int32)">
            <summary>
            Gets a line from the file's contents.
            </summary>
            <param name="lineNumber">The 1-based line number in the file.</param>
            <returns>The complete line at the given line number.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.GetLinesInRange(Microsoft.PowerShell.EditorServices.BufferRange)">
            <summary>
            Gets a range of lines from the file's contents.
            </summary>
            <param name="bufferRange">The buffer range from which lines will be extracted.</param>
            <returns>An array of strings from the specified range of the file.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.ValidatePosition(Microsoft.PowerShell.EditorServices.BufferPosition)">
            <summary>
            Throws ArgumentOutOfRangeException if the given position is outside
            of the file's buffer extents.
            </summary>
            <param name="bufferPosition">The position in the buffer to be validated.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.ValidatePosition(System.Int32,System.Int32)">
            <summary>
            Throws ArgumentOutOfRangeException if the given position is outside
            of the file's buffer extents.
            </summary>
            <param name="line">The 1-based line to be validated.</param>
            <param name="column">The 1-based column to be validated.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.ApplyChange(Microsoft.PowerShell.EditorServices.FileChange)">
            <summary>
            Applies the provided FileChange to the file's contents
            </summary>
            <param name="fileChange">The FileChange to apply to the file's contents.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.GetOffsetAtPosition(System.Int32,System.Int32)">
            <summary>
            Calculates the zero-based character offset of a given
            line and column position in the file.
            </summary>
            <param name="lineNumber">The 1-based line number from which the offset is calculated.</param>
            <param name="columnNumber">The 1-based column number from which the offset is calculated.</param>
            <returns>The zero-based offset for the given file position.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.CalculatePosition(Microsoft.PowerShell.EditorServices.BufferPosition,System.Int32,System.Int32)">
            <summary>
            Calculates a FilePosition relative to a starting BufferPosition
            using the given 1-based line and column offset.
            </summary>
            <param name="originalPosition">The original BufferPosition from which an new position should be calculated.</param>
            <param name="lineOffset">The 1-based line offset added to the original position in this file.</param>
            <param name="columnOffset">The 1-based column offset added to the original position in this file.</param>
            <returns>A new FilePosition instance with the resulting line and column number.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.GetPositionAtOffset(System.Int32)">
            <summary>
            Calculates the 1-based line and column number position based
            on the given buffer offset.
            </summary>
            <param name="bufferOffset">The buffer offset to convert.</param>
            <returns>A new BufferPosition containing the position of the offset.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.GetRangeBetweenOffsets(System.Int32,System.Int32)">
            <summary>
            Calculates the 1-based line and column number range based on
            the given start and end buffer offsets.
            </summary>
            <param name="startOffset">The start offset of the range.</param>
            <param name="endOffset">The end offset of the range.</param>
            <returns>A new BufferRange containing the positions in the offset range.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptFile.ParseFileContents">
            <summary>
            Parses the current file contents to get the AST, tokens,
            and parse errors.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ScriptFileMarkerLevel">
            <summary>
            Defines the message level of a script file marker.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.ScriptFileMarkerLevel.Information">
            <summary>
            The marker represents an informational message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.ScriptFileMarkerLevel.Warning">
            <summary>
            The marker represents a warning message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.EditorServices.ScriptFileMarkerLevel.Error">
            <summary>
            The marker represents an error message.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ScriptFileMarker">
            <summary>
            Contains details about a marker that should be displayed
            for the a script file.  The marker information could come
            from syntax parsing or semantic analysis of the script.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFileMarker.Message">
            <summary>
            Gets or sets the marker's message string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFileMarker.Level">
            <summary>
            Gets or sets the marker's message level.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptFileMarker.ScriptRegion">
            <summary>
            Gets or sets the ScriptRegion where the marker should appear.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.ScriptRegion">
            <summary>
            Contains details about a specific region of text in script file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.File">
            <summary>
            Gets the file path of the script file in which this region is contained.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.Text">
            <summary>
            Gets or sets the text that is contained within the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.StartLineNumber">
            <summary>
            Gets or sets the starting line number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.StartColumnNumber">
            <summary>
            Gets or sets the starting column number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.StartOffset">
            <summary>
            Gets or sets the starting file offset of the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.EndLineNumber">
            <summary>
            Gets or sets the ending line number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.EndColumnNumber">
            <summary>
            Gets or sets the ending column number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.ScriptRegion.EndOffset">
            <summary>
            Gets or sets the ending file offset of the region.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.ScriptRegion.Create(System.Management.Automation.Language.IScriptExtent)">
            <summary>
            Creates a new instance of the ScriptRegion class from an
            instance of an IScriptExtent implementation.
            </summary>
            <param name="scriptExtent">
            The IScriptExtent to copy into the ScriptRegion.
            </param>
            <returns>
            A new ScriptRegion instance with the same details as the IScriptExtent.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.EditorServices.Workspace">
            <summary>
            Manages a "workspace" of script files that are open for a particular
            editing session.  Also helps to navigate references between ScriptFiles.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EditorServices.Workspace.WorkspacePath">
            <summary>
            Gets or sets the root path of the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.#ctor(System.Version)">
            <summary>
            Creates a new instance of the Workspace class.
            </summary>
            <param name="powerShellVersion">The version of PowerShell for which scripts will be parsed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.GetFile(System.String)">
            <summary>
            Gets an open file in the workspace.  If the file isn't open but
            exists on the filesystem, load and return it.
            </summary>
            <param name="filePath">The file path at which the script resides.</param>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filePath"/> is not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains a null or empty string.
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.GetFileBuffer(System.String,System.String)">
            <summary>
            Gets a new ScriptFile instance which is identified by the given file
            path and initially contains the given buffer contents.
            </summary>
            <param name="filePath"></param>
            <param name="initialBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.GetOpenedFiles">
            <summary>
            Gets an array of all opened ScriptFiles in the workspace.
            </summary>
            <returns>An array of all opened ScriptFiles in the workspace.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.CloseFile(Microsoft.PowerShell.EditorServices.ScriptFile)">
            <summary>
            Closes a currently open script file with the given file path.
            </summary>
            <param name="scriptFile">The file path at which the script resides.</param>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.ExpandScriptReferences(Microsoft.PowerShell.EditorServices.ScriptFile)">
            <summary>
            Gets all file references by recursively searching 
            through referenced files in a scriptfile
            </summary>
            <param name="scriptFile">Contains the details and contents of an open script file</param>
            <returns>A scriptfile array where the first file 
            in the array is the "root file" of the search</returns>
        </member>
        <member name="M:Microsoft.PowerShell.EditorServices.Workspace.RecursivelyFindReferences(Microsoft.PowerShell.EditorServices.ScriptFile,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.EditorServices.ScriptFile})">
            <summary>
            Recusrively searches through referencedFiles in scriptFiles
            and builds a Dictonary of the file references
            </summary>
            <param name="scriptFile">Details an contents of "root" script file</param>
            <param name="referencedScriptFiles">A Dictionary of referenced script files</param>
        </member>
    </members>
</doc>
